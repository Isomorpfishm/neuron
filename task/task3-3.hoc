// Task 3-3: Neural network with capability to export weights and random values generated
// NMODL: Gluct.mod, tmgsyn.mod, IPulse1.mod
// Seed file: seed.dat

load_file("nrngui.hoc")
num_run = 123

//--------------------------------------------------------------------------------------
//  Access the seed file
//--------------------------------------------------------------------------------------

objref f

func open_seed() {
	num_run = $1

	f = new File()
	f.ropen("seed.dat")

	for mi = 1, num_run {
		seed_val = f.scanvar()
	}

	f.close()

	return seed_val
}

seed = open_seed(num_run)


//--------------------------------------------------------------------------------------
//  create neuronal compartments and insert hh properties
//--------------------------------------------------------------------------------------

begintemplate SThcell

public soma, dend0, dend1, axon, nclist, ap
create soma, dend0, dend1, axon, ap
objectvar nclist

proc init() { local i
	nsegdend = $1

	create soma, dend0, dend1, axon, ap
	nclist = new List()

	soma {
		nseg = 5
		diam = 20
		L = 20
		Ra = 160
		cm = 1
		insert hh
	}

	ap {
		nseg = nsegdend
		diam = 2.0
		L = 400
		Ra = 160
		cm = 1
		insert hh
	}

	dend0 {
		nseg = nsegdend
		diam = 1.0
		L = 300
		Ra = 160
		cm = 1
		insert hh
	}

	dend1 {
		nseg = nsegdend
		diam = 1.0
		L = 500
		Ra = 160
		cm = 1
		insert hh
	}

	axon {
    		nseg = 50
    		diam = 1
    		L = 1000
    		cm = 1
    		insert hh
	}

	// Connect things together
	connect soma(1), axon(1)
	connect ap(1), soma(0)
	connect dend0(1), ap(0)
	connect dend1(1), ap(0)

}
endtemplate SThcell



//--------------------------------------------------------------------------------------
//  neurons alignment
//--------------------------------------------------------------------------------------

// create twelve new neurons with 99 segments
nSThcells = 12
objectvar SThcells[nSThcells]

for i = 0, nSThcells-1 {
	SThcells[i] = new SThcell(99)

	// define spatial arrangement
	if (i == 0 || i == 1 || i == 2) {
		SThcells[i].soma {
			pt3dclear()
			pt3dadd(-10, 410, 40*i, 20)
			pt3dadd(10, 410, 40*i, 20)
		}
		SThcells[i].axon {
			pt3dadd(10, 410, 40*i, 1)
			pt3dadd(1010, 410, 40*i, 1)
		}
	}

	if (i == 3 || i == 4 || i == 5) {
		SThcells[i].soma {
			pt3dclear()
			pt3dadd(1010, 10, 40*(i-3), 20)
			pt3dadd(1010, -10, 40*(i-3), 20)
		}
		SThcells[i].axon {
			pt3dadd(1010, -10, 40*(i-3), 1)
			pt3dadd(1010, -1010, 40*(i-3), 1)
		}
	}

	if (i == 6 || i == 7 || i == 8) {
		SThcells[i].soma {
			pt3dclear()
			pt3dadd(610, -1010, 40*(i-6), 20)
			pt3dadd(590, -1010, 40*(i-6), 20)
		}
		SThcells[i].axon {
			pt3dadd(590, -1010, 40*(i-6), 1)
			pt3dadd(-410, -1010, 40*(i-6), 1)
		}
	}	

	if (i == 9 || i == 10 || i == 11) {
		SThcells[i].soma {
			pt3dclear()
			pt3dadd(-410, -610, 40*(i-9), 20)
			pt3dadd(-410, -590, 40*(i-9), 20)
		}
		SThcells[i].axon {
			pt3dadd(-410, -590, 40*(i-9), 1)
			pt3dadd(-410, 410, 40*(i-9), 1)
		}
	}
}



//--------------------------------------------------------------------------------------
//  create intranodal and internodal synapses
//--------------------------------------------------------------------------------------

// define the source of events for a synapse
// FORMAT: new NetCon(&source_v, synapse, threshold, delay, weight)
// 12 neurons with maximum 20 intranodal and internodal synapses each

objectvar syn[240], sym[240], r_inter, r_intra, r_intra_dly, r_intra_wei
objref f1, f2, f_intra, f_inter

proc synapses() { local seed
	seed = $1

	r_inter = new Random(seed)
	r_intra = new Random(seed)
	r_intra_dly = new Random(seed)
	r_intra_wei = new Random(seed)
	
	for i = 0, 11 {
		for j = 1, 20 {
			SThcells[i].dend0 syn[20*i + j - 1] = new ExpSyn(0)
			SThcells[i].dend1 sym[20*i + j - 1] = new ExpSyn(0)
		} 
	}

	for (i = 0; i <= 11; i = i + 1) {
		k1 = r_inter.discunif(0, 10) 	// allow no-intranodal-synapses scenario
		k2 = r_inter.repick()
		k3 = r_intra.discunif(1, 20)	// prevent no-internodal-synapses scenario, must have at least one

		k = 1 

		if (i == 0 || i == 3 || i == 6 || i == 9) {
			p = i + 1
			q = i + 2
			temp = 0
		}

		if (i == 1 || i == 4 || i == 7 || i == 10) {
			q = i - 1
			p = i + 1
			temp = 1
		}

		if (i == 2 || i == 5 || i == 8 || i == 11) {
			q = i - 1
			p = i - 2
			temp = 2
		}
		
		// intranodal synapses
		while (k <= k1 || k <= k2) {
			if ((k > k1 && k <= k2) || (k <= k1 && k <= k2)) {
				wei_up = r_intra_wei.uniform(0.0001, 1)
				delay_up = r_intra_dly.discunif(1, 5)
				
				SThcells[i].soma SThcells[p].nclist.append(new NetCon(&v(1), syn[20*i + k - 1], -55, delay_up, wei_up))
				f1.printf("soma of neuron %d to dend0 of neuron %d - even perm\n", i, p)
				f_intra.printf("%d\t%d\t%g\n", i, p, wei_up)	
			} 

			if ((k <= k1 && k > k2) || (k <= k1 && k <= k2)) {
				wei_down = r_intra_wei.uniform(0.0001, 1)
				delay_down = r_intra_dly.discunif(1, 5)	
				
				
				SThcells[i].soma SThcells[q].nclist.append(new NetCon(&v(1), syn[20*i + 10 + k - 1], -55, delay_down, wei_down))
				f1.printf("soma of neuron %d to dend0 of neuron %d - odd perm\n", i, q)
				f_intra.printf("%d\t%d\t%g\n", i, q, wei_down)	
			}
			k += 1	
		}

		// internodal synapses
		for (k = 1; k <= k3; k = k + 1) {
			wei = r_inter.uniform(0.0001, 1)
			delay = r_inter.uniform(1, 5)
			
			if (k % 3 == 0) {
				arg = (i+3-temp)%12
				f2.printf("axon of neuron %d to dend1 of neuron %d +0 loop\n", i, arg)
			}
			if (k % 3 == 1) {
				arg = (i+4-temp)%12
				f2.printf("axon of neuron %d to dend1 of neuron %d +1 loop\n", i, arg)
			}
			if (k % 3 == 2) {
				arg = (i+5-temp)%12
				f2.printf("axon of neuron %d to dend1 of neuron %d +2 loop\n", i, arg)
			}

			SThcells[i].axon SThcells[arg].nclist.append(new NetCon(&v(0), sym[20*i + k - 1], -55, delay, wei))
			f_inter.printf("%d\t%d\t%g\n", i, arg, wei)
		}
		print "-----< Neuron ", i, "has ", k1, "odd ", k2, "even intra-syp resp and ", k3, "inter-syp >-----"	
	}
}



//--------------------------------------------------------------------------------------
// insert Gfluct, tmgsyn (excitatory synapses parameters), IPulse processes/mechanisms
//--------------------------------------------------------------------------------------

objref fl[nSThcells], fac[nSThcells], stim[nSThcells]

for (i = 0; i <= 11; i = i + 1) {
	SThcells[i].axon fl[i] = new Gfluct2(0.5)
	fl[i].seed  = seed
	fl[i].std_e = 0.012		 	// std dev of excitatory conductance
	fl[i].std_i = 0.0264*0    		// std dev of inhibitory conductance
	fl[i].tau_e = 2.728    			// time const of excitatory conductance
	fl[i].tau_i = 10.49*0  			// time const of inhibitory conductance
	fl[i].g_e0  = 0.0121			// avg excitatory conductance
	fl[i].g_i0  = 0.0573*0   		// avg inhibitory conductance
	fl[i].E_e   = 0 			// reversal potential of excitatory conductance
	fl[i].E_i   = -75*0        		// reversal potential of inhibitory conductance

	SThcells[i].axon fac[i] = new tmgsyn(0.5)

	// The "facilition" term u governs the fraction of x (recovered) that is converted to y (active) 
	// on each synaptic activation.

	fac[i].e         = 0			// equilibrium
	fac[i].tau_1	 = 3			// time const of "syp resources" converted from "active" to "inactive" state
	fac[i].tau_rec   = 800			// time const of "syp resources" converted from "inactive" to "recovered" state
	fac[i].tau_facil = 0			// time const of decay of facilitation
	fac[i].U         = 0.05	(1)		// "facilitation variable", <0, 1>
	fac[i].u0        = 0.00 (1)     	// initial value for the "facilitation variable"

	if (i == 0 || i == 1 || i == 2) {
		// a train of spikes
		SThcells[i].axon stim[i] = new Ipulse1(0.8)
		stim[i].del = 0    			// starting time
		stim[i].ton = 0.5			// duration of current pulse
		stim[i].toff = 0.5			// interpulse interval
		stim[i].num = 3				// number of spikes
		stim[i].amp = 0.2			// amplitude of spikes
	}
}



//--------------------------------------------------------------------------------------
// 
//--------------------------------------------------------------------------------------

access SThcells[0].soma
xopen("task3-3.ses")


//--------------------------------------------------------------------------------------
//  initialize: run() and multirun()
//--------------------------------------------------------------------------------------

objref rec_t, rec_i_0, rec_i_3, rec_i_6, rec_i_9, sav_data
objref recv0, recv1, recv2, recv3, recv4, recv5
objref recv6, recv7, recv8, recv9, recv10, recv11
objref voltage_tl, voltage_tr, voltage_bl, voltage_br

proc run() {
	running_ = 1
	stdinit()
	continuerun(tstop)
}

proc multi_run() {
	
	f1 = new File()
	f2 = new File()
	f_intra = new File()
	f_inter = new File()

	f1.wopen("intra_syn.txt")
	f2.wopen("inter_syn.txt")
	f_intra.wopen("intra_syn_weight.txt")
	f_inter.wopen("inter_syn_weight.txt")

	rec_t = new Vector()
	rec_i_0 = new Vector()
	rec_i_3 = new Vector()
	rec_i_6 = new Vector()
	rec_i_9 = new Vector()

	rec_t.record(&t)
	rec_i_0.record(&Gfluct2[0].rnd)
	rec_i_3.record(&Gfluct2[3].rnd)
	rec_i_6.record(&Gfluct2[6].rnd)
	rec_i_9.record(&Gfluct2[9].rnd)

	recv0 = new Vector()
	recv1 = new Vector()
	recv2 = new Vector()
	recv3 = new Vector()
	recv4 = new Vector()
	recv5 = new Vector()
	recv6 = new Vector()
	recv7 = new Vector()
	recv8 = new Vector()
	recv9 = new Vector()
	recv10 = new Vector()
	recv11 = new Vector()

	recv0.record(&SThcells[0].axon.v(0.25))
	recv1.record(&SThcells[1].axon.v(0.25))
	recv2.record(&SThcells[2].axon.v(0.25))
	recv3.record(&SThcells[3].axon.v(0.25))
	recv4.record(&SThcells[4].axon.v(0.25))
	recv5.record(&SThcells[5].axon.v(0.25))
	recv6.record(&SThcells[6].axon.v(0.25))
	recv7.record(&SThcells[7].axon.v(0.25))
	recv8.record(&SThcells[8].axon.v(0.25))
	recv9.record(&SThcells[9].axon.v(0.25))
	recv10.record(&SThcells[10].axon.v(0.25))
	recv11.record(&SThcells[11].axon.v(0.25))

	synapses(seed)

	run()

	voltage_tl = new File()
	voltage_tr = new File()
	voltage_bl = new File()
	voltage_br = new File()

	voltage_tl.wopen("data_tl.txt")
	voltage_tr.wopen("data_tr.txt")
	voltage_bl.wopen("data_bl.txt")
	voltage_br.wopen("data_br.txt")

	sav_data = new File()
	sav_data.aopen("Gfluct[0-3-6-9]_i.txt")

	voltage_tl.printf("time\tneuron9\tneuron10\tneuron11\n")
	voltage_tr.printf("time\tneuron0\tneuron1\tneuron2\n")
	voltage_br.printf("time\tneuron3\tneuron4\tneuron5\n")
	voltage_bl.printf("time\tneuron6\tneuron7\tneuron8\n")

	for k=0, rec_t.size()-1 {
		sav_data.printf("%g\t%g\t%g\t%g\t%g\n", rec_t.x[k], rec_i_0.x[k], rec_i_3.x[k], rec_i_6.x[k], rec_i_9.x[k])
		voltage_tl.printf("%g\t%g\t%g\t%g\n", rec_t.x[k], recv9.x[k], recv10.x[k], recv11.x[k])
		voltage_tr.printf("%g\t%g\t%g\t%g\n", rec_t.x[k], recv0.x[k], recv1.x[k], recv2.x[k])
		voltage_br.printf("%g\t%g\t%g\t%g\n", rec_t.x[k], recv3.x[k], recv4.x[k], recv5.x[k])
		voltage_bl.printf("%g\t%g\t%g\t%g\n", rec_t.x[k], recv6.x[k], recv7.x[k], recv8.x[k])
	}
}


multi_run()

f1.close()
f2.close()
f_intra.close()
f_inter.close()
sav_data.close()

voltage_tl.close()
voltage_tr.close()
voltage_br.close()
voltage_bl.close()

print "Rec_t size is ", rec_t.size(), "and rec_i_0 size is ", rec_i_0.size()
