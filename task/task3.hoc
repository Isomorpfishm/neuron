// Task 3: A four-node neural network with randomness included

load_file("nrngui.hoc")

begintemplate SThcell
public soma, dend0, dend1, axon, nclist, ap

create soma, dend0, dend1, axon, ap
objectvar nclist

proc init() { local i

	nsegdend = $1

	create soma, dend0, dend1, axon, ap

	nclist = new List()

	soma {
		nseg = 3
		diam = 20
		L = 20
		Ra = 160
		cm = 1
		insert hh
		gnabar_hh = 0.12
      	gkbar_hh = 0.036
      	gl_hh = 0.0003
      	el_hh = -54.3
	}

	ap {
		nseg = nsegdend
		diam = 2.0
		L = 400
		Ra = 160
		cm = 1
		insert hh
		gnabar_hh = 0.012
      	gkbar_hh = 0.0036
      	gl_hh = 0.0003
      	el_hh = -64
	}

	dend0 {
		nseg = nsegdend
		diam = 1.0
		L = 300
		Ra = 160
		cm = 1
		insert hh
		gnabar_hh = 0.012
      	gkbar_hh = 0.0036
      	gl_hh = 0.0003
      	el_hh = -64
	}

	dend1 {
		nseg = nsegdend
		diam = 1.0
		L = 500
		Ra = 160
		cm = 1
		insert hh
		gnabar_hh = 0.012
      	gkbar_hh = 0.0036
      	gl_hh = 0.0003
      	el_hh = -64
	}

	axon {
    	nseg = 30
    	diam = 1
    	L = 1000
    	cm = 1
    	insert hh
    	gnabar_hh = 0.12
      	gkbar_hh = 0.036
      	gl_hh = 0.0003
      	el_hh = -54.3
	}

	// Connect things together
	connect soma(1), axon(1)
	connect ap(1), soma(0)
	connect dend0(1), ap(0)
	connect dend1(1), ap(0)


}
endtemplate SThcell


// <------------------------------------------------------------------------------------------------------> 

////// Topology ///////

// create twelve new neurons
nSThcells = 12
objectvar SThcells[nSThcells]

// create all three of our cells using the `new` command in a `for` loop
for i = 0, nSThcells-1 {
	SThcells[i] = new SThcell(30)
}

for i = 0, 2 {
	SThcells[i].soma {
		pt3dclear()
		pt3dadd(-10, 410, 40*i, 20)
		pt3dadd(10, 410, 40*i, 20)
	}
	SThcells[i].axon {
		pt3dadd(10, 410, 40*i, 1)
		pt3dadd(1010, 410, 40*i, 1)
	}
}

for i = 3, 5 {
	SThcells[i].soma {
		pt3dclear()
		pt3dadd(1010, 10, 40*(i-3), 20)
		pt3dadd(1010, -10, 40*(i-3), 20)
	}
	SThcells[i].axon {
		pt3dadd(1010, -10, 40*(i-3), 1)
		pt3dadd(1010, -1010, 40*(i-3), 1)
	}
}

for i = 6, 8 {
	SThcells[i].soma {
		pt3dclear()
		pt3dadd(610, -1010, 40*(i-6), 20)
		pt3dadd(590, -1010, 40*(i-6), 20)
	}
	SThcells[i].axon {
		pt3dadd(590, -1010, 40*(i-6), 1)
		pt3dadd(-410, -1010, 40*(i-6), 1)
	}
}

for i = 9, 11 {
	SThcells[i].soma {
		pt3dclear()
		pt3dadd(-410, -610, 40*(i-9), 20)
		pt3dadd(-410, -590, 40*(i-9), 20)
	}
	SThcells[i].axon {
		pt3dadd(-410, -590, 40*(i-9), 1)
		pt3dadd(-410, 410, 40*(i-9), 1)
	}
}



// <------------------------------------------------------------------------------------------------------> 

// define the source of events for a synapse
// FORMAT: new NetCon(&source_v, synapse, threshold, delay, weight)
// to connect SThcells[1] to the proximal end of axon on subthalamic neuron SThcells[0]:
//SThcells[1].soma SThcells[0].nclist.append(new NetCon(&v(1), syn[0], -20, 1, 0.5))


objectvar syn[600], sym[600], tms


for (i = 0; i <= 11; i = i + 1) {
	tms = new Random()
	num = tms.uniform(1, 50)
	con = int(num)
	
	for j = 1, con { 
		SThcells[i].dend0 syn[50*i + j - 1] = new ExpSyn(0) 
	}

	if (i == 0) {
		for k = 1, con {
			if (k % 3 == 0) {
				SThcells[0].soma SThcells[1].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 1) {
				SThcells[0].soma SThcells[2].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
		}
	}

	if (i == 1) {
		for k = 1, con {
			if (k % 3 == 0) {
				SThcells[1].soma SThcells[2].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 1) {
				SThcells[1].soma SThcells[0].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
		}
	}

	if (i == 2) {
		for k = 1, con {
			if (k % 3 == 0) {
				SThcells[2].soma SThcells[0].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 1) {
				SThcells[2].soma SThcells[1].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
		}
	}

	if (i == 3) {
		for k = 1, con {
			if (k % 3 == 0) {
				SThcells[3].soma SThcells[4].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 1) {
				SThcells[3].soma SThcells[5].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
		}
	}

	if (i == 4) {
		for k = 1, con {
			if (k % 3 == 0) {
				SThcells[4].soma SThcells[5].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 1) {
				SThcells[4].soma SThcells[3].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
		}
	}

	if (i == 5) {
		for k = 1, con {
			if (k % 3 == 0) {
				SThcells[5].soma SThcells[3].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 1) {
				SThcells[5].soma SThcells[4].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
		}
	}

	if (i == 6) {
		for k = 1, con {
			if (k % 3 == 0) {
				SThcells[6].soma SThcells[7].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 1) {
				SThcells[6].soma SThcells[8].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
		}
	}

	if (i == 7) {
		for k = 1, con {
			if (k % 3 == 0) {
				SThcells[7].soma SThcells[8].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 1) {
				SThcells[8].soma SThcells[6].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
		}
	}

	if (i == 8) {
		for k = 1, con {
			if (k % 3 == 0) {
				SThcells[8].soma SThcells[6].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 1) {
				SThcells[8].soma SThcells[7].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
		}
	}

	if (i == 9) {
		for k = 1, con {
			if (k % 3 == 0) {
				SThcells[9].soma SThcells[10].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 1) {
				SThcells[9].soma SThcells[11].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
		}
	}

	if (i == 10) {
		for k = 1, con {
			if (k % 3 == 0) {
				SThcells[10].soma SThcells[11].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 1) {
				SThcells[10].soma SThcells[10].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
		}
	} 

	if (i == 11) {
		for k = 1, con {
			if (k % 3 == 0) {
				SThcells[11].soma SThcells[9].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 1) {
				SThcells[11].soma SThcells[10].nclist.append(new NetCon(&v(1), syn[50*i + k - 1], -65, 1, 1))
			}
		}
	}     	
}


for (i = 0; i <= 11; i = i + 1) {
	tms = new Random()
	num = tms.uniform(1, 50)
	con = int(num)
	
	for j = 1, con { 
		SThcells[i].dend1 sym[50*i + j - 1] = new ExpSyn(0) 
	}

	if (i == 0 || i == 1 || i == 2) {
		for k = 1, con {
			if (k % 3 == 0) {
				SThcells[i].soma SThcells[3].nclist.append(new NetCon(&v(0), sym[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 1) {
				SThcells[i].soma SThcells[4].nclist.append(new NetCon(&v(0), sym[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 2) {
				SThcells[i].soma SThcells[5].nclist.append(new NetCon(&v(0), sym[50*i + k - 1], -65, 1, 1))
			}
		}
	}


	if (i == 3 || i == 4 || i == 5) {
		for k = 1, con {
			if (k % 3 == 0) {
				SThcells[i].soma SThcells[6].nclist.append(new NetCon(&v(0), sym[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 1) {
				SThcells[i].soma SThcells[7].nclist.append(new NetCon(&v(0), sym[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 2) {
				SThcells[i].soma SThcells[8].nclist.append(new NetCon(&v(0), sym[50*i + k - 1], -65, 1, 1))
			}
		}
	}


	if (i == 6 || i == 7 || i == 8) {
		for k = 1, con {
			if (k % 3 == 0) {
				SThcells[i].soma SThcells[9].nclist.append(new NetCon(&v(0), sym[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 1) {
				SThcells[i].soma SThcells[10].nclist.append(new NetCon(&v(0), sym[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 2) {
				SThcells[i].soma SThcells[11].nclist.append(new NetCon(&v(0), sym[50*i + k - 1], -65, 1, 1))
			}
		}
	}


	if (i == 9 || i == 10 || i == 11) {
		for k = 1, con {
			if (k % 3 == 0) {
				SThcells[i].soma SThcells[0].nclist.append(new NetCon(&v(0), sym[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 1) {
				SThcells[i].soma SThcells[1].nclist.append(new NetCon(&v(0), sym[50*i + k - 1], -65, 1, 1))
			}
			if (k % 3 == 2) {
				SThcells[i].soma SThcells[2].nclist.append(new NetCon(&v(0), sym[50*i + k - 1], -65, 1, 1))
			}
		}
	}     	
}


// <------------------------------------------------------------------------------------------------------> 

////// Simulation ///////


objectvar stim[nSThcells]

for (i = 0; i <= 11; i = i + 1) {
	SThcells[i].axon stim[i] = new IClamp(0.5)
}

for (j = 0; j <= 4; j = j + 1) {
	if (j==0) { 
		a = 3 
	} else { 
		if (j==1) {
			a = 0
		} else {
			if (j==2) {
				a = 6
			} else {
				if (j==3) {
					a = 9
				} else {
					a = 3
				}
			}
		}
	}


	stim[a].del = j * 5
	stim[a+1].del = j * 5
	stim[a+2].del = j * 5

	stim[a].dur = 5
	stim[a+1].dur = 5
	stim[a+2].dur = 5

	stim[a].amp = 1
	stim[a+1].amp = 1
	stim[a+2].amp = 1
}





/*
objectvar stim

SThcells[0].soma stim = new IClamp(0.5)

stim.del = 100
stim.dur = 100
stim.amp = 1
tstop = 300
*/

access SThcells[0].soma
