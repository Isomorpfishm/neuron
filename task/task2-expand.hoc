// Task 2: Create a four-node neural network with three interconnected neurons in each node

load_file("nrngui.hoc")

begintemplate SThcell
public soma, dend0, dend1, axon, nclist, ap

create soma, dend0, dend1, axon, ap
objectvar nclist

proc init() { local i

	nsegdend = $1

	create soma, dend0, dend1, axon, ap

	nclist = new List()

	soma {
		nseg = 3
		diam = 20
		L = 20
		Ra = 160
		cm = 1
		insert hh
		gnabar_hh = 0.12
      	gkbar_hh = 0.036
      	gl_hh = 0.0003
      	el_hh = -54.3
	}

	ap {
		nseg = nsegdend
		diam = 2.0
		L = 400
		Ra = 160
		cm = 1
		insert hh
		gnabar_hh = 0.012
      	gkbar_hh = 0.0036
      	gl_hh = 0.0003
      	el_hh = -64
	}

	dend0 {
		nseg = nsegdend
		diam = 1.0
		L = 300
		Ra = 160
		cm = 1
		insert hh
		gnabar_hh = 0.012
      	gkbar_hh = 0.0036
      	gl_hh = 0.0003
      	el_hh = -64
	}

	dend1 {
		nseg = nsegdend
		diam = 1.0
		L = 500
		Ra = 160
		cm = 1
		insert hh
		gnabar_hh = 0.012
      	gkbar_hh = 0.0036
      	gl_hh = 0.0003
      	el_hh = -64
	}

	axon {
    	nseg = 30
    	diam = 1
    	L = 1000
    	cm = 1
    	insert hh
    	gnabar_hh = 0.12
      	gkbar_hh = 0.036
      	gl_hh = 0.0003
      	el_hh = -54.3
	}

	// Connect things together
	connect soma(1), axon(1)
	connect ap(1), soma(0)
	connect dend0(1), ap(0)
	connect dend1(1), ap(0)


}
endtemplate SThcell


// <------------------------------------------------------------------------------------------------------> 

////// Topology ///////

// create twelve new neurons
nSThcells = 12
objectvar SThcells[nSThcells]

// create all three of our cells using the `new` command in a `for` loop
for i = 0, nSThcells-1 {
	SThcells[i] = new SThcell(18)
}

for i = 0, 2 {
	SThcells[i].soma {
		pt3dclear()
		pt3dadd(-10, 410, 40*i, 20)
		pt3dadd(10, 410, 40*i, 20)
	}
	SThcells[i].axon {
		pt3dadd(10, 410, 40*i, 1)
		pt3dadd(1010, 410, 40*i, 1)
	}
}

for i = 3, 5 {
	SThcells[i].soma {
		pt3dclear()
		pt3dadd(1010, 10, 40*(i-3), 20)
		pt3dadd(1010, -10, 40*(i-3), 20)
	}
	SThcells[i].axon {
		pt3dadd(1010, -10, 40*(i-3), 1)
		pt3dadd(1010, -1010, 40*(i-3), 1)
	}
}

for i = 6, 8 {
	SThcells[i].soma {
		pt3dclear()
		pt3dadd(610, -1010, 40*(i-6), 20)
		pt3dadd(590, -1010, 40*(i-6), 20)
	}
	SThcells[i].axon {
		pt3dadd(590, -1010, 40*(i-6), 1)
		pt3dadd(-410, -1010, 40*(i-6), 1)
	}
}

for i = 9, 11 {
	SThcells[i].soma {
		pt3dclear()
		pt3dadd(-410, -610, 40*(i-9), 20)
		pt3dadd(-410, -590, 40*(i-9), 20)
	}
	SThcells[i].axon {
		pt3dadd(-410, -590, 40*(i-9), 1)
		pt3dadd(-410, 410, 40*(i-9), 1)
	}
}





// <------------------------------------------------------------------------------------------------------> 

objectvar r

r = new Random()
num = r.uniform(1, 32)
num_node = int(num)




// <------------------------------------------------------------------------------------------------------> 

// define the source of events for a synapse
// FORMAT: new NetCon(&source_v, synapse, threshold, delay, weight)
// to connect SThcells[1] to the proximal end of axon on subthalamic neuron SThcells[0]:
//SThcells[1].soma SThcells[0].nclist.append(new NetCon(&v(1), syn[0], -20, 1, 0.5))


maxsyn = 32
objectvar syn[maxsyn], sym[maxsyn]

for (i = 0; i <= 3; i = i + 1) SThcells[3*i].dend0 {
	syn[i] = new ExpSyn(0)
}
for (i = 0; i <= 3; i = i + 1) SThcells[3*i].dend1 {
	sym[i] = new ExpSyn(0)
}

for (i = 0; i <= 3; i = i + 1) SThcells[3*i+1].dend0 {
	syn[i+4] = new ExpSyn(0)
}
for (i = 0; i <= 3; i = i + 1) SThcells[3*i+1].dend1 {
	sym[i+4] = new ExpSyn(0)
}

for (i = 0; i <= 3; i = i + 1) SThcells[3*i+2].dend0 {
	syn[i+8] = new ExpSyn(0)
}
for (i = 0; i <= 3; i = i + 1) SThcells[3*i+2].dend1 {
	sym[i+8] = new ExpSyn(0)
}



SThcells[0].soma SThcells[1].nclist.append(new NetCon(&v(1), syn[0], -65, 1, 1))
SThcells[1].soma SThcells[2].nclist.append(new NetCon(&v(1), syn[1], -65, 1, 1))
SThcells[2].soma SThcells[0].nclist.append(new NetCon(&v(1), syn[2], -65, 1, 1))

SThcells[3].soma SThcells[4].nclist.append(new NetCon(&v(1), syn[3], -65, 1, 1))
SThcells[4].soma SThcells[5].nclist.append(new NetCon(&v(1), syn[4], -65, 1, 1))
SThcells[5].soma SThcells[3].nclist.append(new NetCon(&v(1), syn[5], -65, 1, 1))

SThcells[6].soma SThcells[7].nclist.append(new NetCon(&v(1), syn[6], -65, 1, 1))
SThcells[7].soma SThcells[8].nclist.append(new NetCon(&v(1), syn[7], -65, 1, 1))
SThcells[8].soma SThcells[6].nclist.append(new NetCon(&v(1), syn[8], -65, 1, 1))

SThcells[9].soma SThcells[10].nclist.append(new NetCon(&v(1), syn[9], -65, 1, 1))
SThcells[10].soma SThcells[11].nclist.append(new NetCon(&v(1), syn[10], -65, 1, 1))
SThcells[11].soma SThcells[9].nclist.append(new NetCon(&v(1), syn[11], -65, 1, 1))


SThcells[0].axon SThcells[3].nclist.append(new NetCon(&v(0), sym[0], -65, 1, 1))
SThcells[3].axon SThcells[6].nclist.append(new NetCon(&v(0), sym[1], -65, 1, 1))
SThcells[6].axon SThcells[9].nclist.append(new NetCon(&v(0), sym[2], -65, 1, 1))
SThcells[9].axon SThcells[0].nclist.append(new NetCon(&v(0), sym[3], -65, 1, 1))

SThcells[1].axon SThcells[4].nclist.append(new NetCon(&v(0), sym[4], -65, 1, 1))
SThcells[4].axon SThcells[7].nclist.append(new NetCon(&v(0), sym[5], -65, 1, 1))
SThcells[7].axon SThcells[10].nclist.append(new NetCon(&v(0), sym[6], -65, 1, 1))
SThcells[10].axon SThcells[1].nclist.append(new NetCon(&v(0), sym[7], -65, 1, 1))

SThcells[2].axon SThcells[5].nclist.append(new NetCon(&v(0), sym[8], -65, 1, 1))
SThcells[5].axon SThcells[8].nclist.append(new NetCon(&v(0), sym[9], -65, 1, 1))
SThcells[8].axon SThcells[11].nclist.append(new NetCon(&v(0), sym[10], -65, 1, 1))
SThcells[11].axon SThcells[2].nclist.append(new NetCon(&v(0), sym[11], -65, 1, 1))






// <------------------------------------------------------------------------------------------------------> 

////// Simulation ///////


objectvar stim[nSThcells]


for i = 0, 2 SThcells[i].soma {
	stim[i] = new IClamp(0.5)
	stim[i].del = 100
	stim[i].dur = 100
	stim[i].amp = 1
	tstop = 300
}




/*
objectvar stim

SThcells[0].soma stim = new IClamp(0.5)

stim.del = 100
stim.dur = 100
stim.amp = 1
tstop = 300
*/

access SThcells[0].soma